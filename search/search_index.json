{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"project_name","text":"<p>What is project_name?</p> <p>Template to build industrialized data science projets.</p>"},{"location":"index.html#example","title":"Example","text":"<p>The recommended way to run the code of this project is via CLI:</p> <pre><code>project-name --help\n</code></pre> <p>which should return the list of the available commands:</p> <pre><code> Usage: project-name [OPTIONS] COMMAND [ARGS]...\n\n Run all datascience commands.\n\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 data     Manages data flow.                                 \u2502\n\u2502 model    Manages model training and predictions.            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"index.html#project-tree","title":"Project tree","text":"<p>The project follows the tree structure described below :</p> <pre><code>.\n\u251c\u2500\u2500 app                  # Entrypoints (FastAPI)\n\u251c\u2500\u2500 data                 # Datasets\n\u251c\u2500\u2500 docs                 # Mkdocs\n\u251c\u2500\u2500 models               # Model checkpoints\n\u251c\u2500\u2500 notebooks            # Experiment notebooks or code examples\n\u251c\u2500\u2500 project_name         # Your package\n\u2502   \u251c\u2500\u2500 data                 # Data loading logic\n\u2502   \u251c\u2500\u2500 model                # Model logic\n\u2502   \u251c\u2500\u2500 config.py            # Pydantic config loading\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 scripts              # Utility shell scripts (build img docker ...)\n\u251c\u2500\u2500 tests                # Unit tests. Should follow the structure of the package.\n\u251c\u2500\u2500 Dockerfile           # Container definition\n\u251c\u2500\u2500 Makefile             # Useful commands\n\u251c\u2500\u2500 mkdocs.yml           # Config for mkdocs\n\u251c\u2500\u2500 pyproject.toml       # UV package and dev tools config\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"index.html#acknowledgments","title":"Acknowledgments","text":"<p>This project is based on the Python CookieCutter template created by Capgemini Invent.</p>"},{"location":"install.html","title":"Installation","text":""},{"location":"install.html#quick-install","title":"Quick install","text":"<p>The easiest way to install project_name is to use the Makefile commands. It will install the package with all its optional dependencies:</p> <pre><code>make create-environment\nsource .venv/bin/activate\nmake install-requirements\n</code></pre> <p>The project is now installed as a package and as a command line tool.</p>"},{"location":"install.html#manual-install","title":"Manual install","text":"<p>Create a virtual environment:</p> <pre><code>uv venv .venv --python 3.12  # or any version of python &gt;=3.10\nsource .venv/bin/activate\nuv sync\n</code></pre> <p>The project is now installed as a package and as a command line tool. If you also want the optional dev and docs dependencies:</p> <pre><code>uv sync --extra dev --extra docs\n</code></pre>"},{"location":"install.html#install-on-machines-without-internet-connection","title":"Install on machines without internet connection","text":"<p>On a machine WITH internet connection:</p> <pre><code>uv build\nuv export --format requirements-txt --output-file dist/requirements.txt\nsed -i -e '/^-e ./d' dist/requirements.txt` (remove artifact\nuv run pip download -r dist/requirements.txt -d dist/wheels\n</code></pre> <p>This will download all wheels in the <code>dist/wheels</code> directory.</p> <p>Next, transfer the wheel files to the machine without connection (network, hard drive, ...). Make sure the target machine already has Python installed. Then install the wheels:</p> <pre><code>pip install uv -f dist/wheels --no-index\npip install * -f dist/wheels --no-index\n</code></pre>"},{"location":"install.html#create-a-jupyter-kernel-with-the-virtual-environment","title":"Create a jupyter kernel with the virtual environment","text":"<p>Activate the virtual environment and add ipykernel as a dev dependency:</p> <pre><code>source .venv/bin/activate\nuv add ipykernel --optional dev\n</code></pre> <p>Warning</p> <p>The kernel might not be available immediately in VScode interface. Try restarting VScode if you have trouble finding the right kernel.</p>"},{"location":"contributing/dev_tools.html","title":"Dev tools","text":"<p>Note</p> <p>To contribute and develop on the project, we recommend using some useful dev tools, like Pre-commit.</p>"},{"location":"contributing/dev_tools.html#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>The repo integrates Pre-commit to automate code quality checks every time you commit. Some of the hooks (checks) included:</p> <p>\u2705 Ruff: Ultra-fast linter and formatter \u2014 replaces flake8, black, and isort.</p> <p>\ud83d\udd0d Mypy: Static type checker to validate type hints.</p> <p>\ud83d\udd12 Detect secrets: Prevents committing sensitive data like API keys.</p> <p>\ud83d\udcc4 YAML and JSON checkers: Ensure config files are valid and properly formatted.</p> <p>To enable pre-commit hooks in your local repo:</p> <pre><code>git init             # need a git repo\nuv sync --extra dev  # install dev dependencies\npre-commit install   # install the git hooks\n</code></pre> <p>Now, every time you git commit locally, the configured checks will run. To manually trigger them across all files:</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"contributing/documentation.html","title":"Documentation","text":"<p>The documentation process relies on Mkdocs with the Material theme  which allows to write markdown styled documentation.</p> <p>We chose mkdocs as it is lighter and easier to configure than Sphinx (and in many cases more than enough).</p>"},{"location":"contributing/documentation.html#build-doc","title":"Build doc","text":"<p>To preview your documentation in real-time while editing, run:</p> <pre><code>uv sync --extra docs\nmkdocs serve\n</code></pre> <p>Some usefuls commands:</p> <pre><code>mkdocs new [dir-name]`  # create a new project.\nmkdocs serve`           # starts local server with the documentation.\nmkdocs build`           # builds documentation.\nmkdocs -h`              # display help message.\n</code></pre>"},{"location":"contributing/documentation.html#deploy","title":"Deploy","text":"<p>The nice part is that the documentation can be hosted on the repository Github page with a single command:</p> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"contributing/documentation.html#change-style","title":"Change style","text":"<p>To adapt the doc style to your style guidelines, change:</p> <ol> <li>the colors in the <code>docs/stylesheets/extra.css</code> file</li> <li>the logo and favicon in the <code>docs/assets/images/</code> folder</li> </ol>"},{"location":"reference/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>project_name<ul> <li>app<ul> <li>main</li> </ul> </li> <li>config</li> <li>data<ul> <li>main</li> </ul> </li> <li>main</li> <li>model<ul> <li>main</li> </ul> </li> <li>utils</li> </ul> </li> </ul>"},{"location":"reference/project_name/index.html","title":"project_name","text":""},{"location":"reference/project_name/config.html","title":"config","text":""},{"location":"reference/project_name/config.html#project_name.config.ArtifactMgr","title":"<code>ArtifactMgr</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Handles data and model storage locations</p> <p>The goal is to reference here the location and naming of all files that are required by the packaged code.</p> Source code in <code>project_name/config.py</code> <pre><code>class ArtifactMgr(BaseModel):\n    \"\"\"\n    Handles data and model storage locations\n\n    The goal is to reference here the location and naming of all\n    files that are required by the packaged code.\n    \"\"\"\n\n    root: Path\n    creation_date: str = datetime.datetime.now().strftime(\"%Y%m%d\")\n\n    @computed_field  # type: ignore[misc]\n    @property\n    def raw_data(self) -&gt; Path:\n        return self.root / BaseTree.data / \"input_data.csv\"\n\n    @computed_field  # type: ignore[misc]\n    @property\n    def model(self) -&gt; Path:\n        \"\"\"\n        For example, one can timestamp created filenames with the drawback\n        that if you need to rerun the process on an other day could lead to issues.\n\n        This means that creation_date might need to be overwritten.\n        \"\"\"\n        return self.root / BaseTree.model / f\"{self.creation_date}_model.h5\"\n</code></pre>"},{"location":"reference/project_name/config.html#project_name.config.ArtifactMgr.model","title":"<code>model</code>  <code>property</code>","text":"<p>For example, one can timestamp created filenames with the drawback that if you need to rerun the process on an other day could lead to issues.</p> <p>This means that creation_date might need to be overwritten.</p>"},{"location":"reference/project_name/config.html#project_name.config.Base","title":"<code>Base</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Base class to store all the project configs.</p> <p>This class will be overloaded by a specific class per environment. We define here environment independant config variables</p> Source code in <code>project_name/config.py</code> <pre><code>class Base(BaseSettings):\n    \"\"\"\n    Base class to store all the project configs.\n\n    This class will be overloaded by a specific class per environment.\n    We define here environment independant config variables\n    \"\"\"\n\n    secret_key: str = Field(\n        \"random_string\", json_schema_extra={\"env\": \"ANOTHER_SECRET_KEY\"}\n    )\n    port: int = 5050\n    username: str = \"basic_username\"\n\n    artifacts: ArtifactMgr = ArtifactMgr(\n        root=(\n            Path(__file__).parent.resolve() if (\"__file__\" in locals()) else Path.cwd()\n        )\n    )\n    model: CatBoostHP = CatBoostHP()\n\n    model_config = SettingsConfigDict(env_file=\".env\", env_file_encoding=\"utf-8\")\n</code></pre>"},{"location":"reference/project_name/config.html#project_name.config.BaseTree","title":"<code>BaseTree</code>","text":"<p>Basic directory structure can be specified here.</p> <p>The defined path are relative to the project root defined below. This tree structure is supposed to not move too much.</p> Source code in <code>project_name/config.py</code> <pre><code>@dataclass\nclass BaseTree:\n    \"\"\"\n    Basic directory structure can be specified here.\n\n    The defined path are relative to the project root defined below.\n    This tree structure is supposed to not move too much.\n    \"\"\"\n\n    # Describes where data files are stored\n    data: Path = Path(\"data\")\n\n    # Path can then be built combining different paths sub sections\n    raw: Path = data / \"raw\"\n    interim: Path = data / \"interim\"\n    processed: Path = data / \"processed\"\n\n    # Describes where model files are stored\n    model: Path = Path(\"models\")\n</code></pre>"},{"location":"reference/project_name/config.html#project_name.config.CatBoostHP","title":"<code>CatBoostHP</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Handles some CatBoost model hyperparameters (as an example)</p> Source code in <code>project_name/config.py</code> <pre><code>class CatBoostHP(BaseSettings):\n    \"\"\"\n    Handles some CatBoost model hyperparameters (as an example)\n    \"\"\"\n\n    verbose: bool = False\n    depth: int = 5\n    iterations: int = 1000\n    early_stopping_rounds: int = 50\n    grow_policy: str = \"Depthwise\"\n</code></pre>"},{"location":"reference/project_name/config.html#project_name.config.Dev","title":"<code>Dev</code>","text":"<p>               Bases: <code>Base</code></p> <p>Development environment settings.</p> Source code in <code>project_name/config.py</code> <pre><code>class Dev(Base):\n    \"\"\"\n    Development environment settings.\n    \"\"\"\n\n    username: str = \"dev_username\"\n\n    model_config = SettingsConfigDict(env_file=\".dev.env\", env_file_encoding=\"utf-8\")\n</code></pre>"},{"location":"reference/project_name/config.html#project_name.config.Prod","title":"<code>Prod</code>","text":"<p>               Bases: <code>Base</code></p> <p>Production environment settings.</p> Source code in <code>project_name/config.py</code> <pre><code>class Prod(Base):\n    \"\"\"\n    Production environment settings.\n    \"\"\"\n\n    username: str = \"prod_username\"\n\n    model_config = SettingsConfigDict(env_file=\".prod.env\", env_file_encoding=\"utf-8\")\n</code></pre>"},{"location":"reference/project_name/main.html","title":"main","text":""},{"location":"reference/project_name/main.html#project_name.main.cli","title":"<code>cli(ctx, verbose=False)</code>","text":"<p>Run all datascience commands.</p> Source code in <code>project_name/main.py</code> <pre><code>@app.callback()\ndef cli(ctx: typer.Context, verbose: bool = False):\n    \"\"\"\n    Run all datascience commands.\n    \"\"\"\n    # This will make available to all downstream commands the loaded configuration\n    ctx.settings = settings\n\n    if verbose:\n        logger.setLevel(\"DEBUG\")\n</code></pre>"},{"location":"reference/project_name/main.html#project_name.main.run","title":"<code>run(ctx)</code>","text":"<p>Run cmd line entry point, e.g. useful to start pipelines.</p> Source code in <code>project_name/main.py</code> <pre><code>@app.command()\ndef run(ctx: typer.Context):\n    \"\"\"\n    Run cmd line entry point, e.g. useful to start pipelines.\n    \"\"\"\n    logger.info(\"Current configuration: %s\", dict(ctx.parent.settings))\n</code></pre>"},{"location":"reference/project_name/utils.html","title":"utils","text":""},{"location":"reference/project_name/utils.html#project_name.utils.PrettyLog","title":"<code>PrettyLog</code>","text":"<p>Nice print for configuration dicts.</p> Source code in <code>project_name/utils.py</code> <pre><code>class PrettyLog:\n    \"\"\"\n    Nice print for configuration dicts.\n    \"\"\"\n\n    def __init__(self, obj):\n        self.obj = dict(obj)\n\n    def __repr__(self):\n        return json.dumps(self.obj, indent=4, default=str)\n</code></pre>"},{"location":"reference/project_name/app/index.html","title":"app","text":""},{"location":"reference/project_name/app/main.html","title":"main","text":""},{"location":"reference/project_name/data/index.html","title":"data","text":""},{"location":"reference/project_name/data/main.html","title":"main","text":""},{"location":"reference/project_name/data/main.html#project_name.data.main.build","title":"<code>build(ctx)</code>","text":"<p>Build a dataset based on downloaded data that is useful for the model.</p> Source code in <code>project_name/data/main.py</code> <pre><code>@app.command()\ndef build(ctx: typer.Context):\n    \"\"\"\n    Build a dataset based on downloaded data that is useful for the model.\n    \"\"\"\n    _settings = ctx.parent.parent.settings\n    logger.info(\n        \"Building a marvelous dataset from raw data: %s.\", _settings.artifacts.raw_data\n    )\n</code></pre>"},{"location":"reference/project_name/data/main.html#project_name.data.main.delete","title":"<code>delete(ctx)</code>","text":"<p>Delete a dataset.</p> Source code in <code>project_name/data/main.py</code> <pre><code>@app.command()\ndef delete(ctx: typer.Context):\n    \"\"\"\n    Delete a dataset.\n    \"\"\"\n    logger.warning(\"This dataset will be deleted\")\n</code></pre>"},{"location":"reference/project_name/data/main.html#project_name.data.main.download","title":"<code>download(ctx)</code>","text":"<p>Download data from somewhere in the cloud.</p> Source code in <code>project_name/data/main.py</code> <pre><code>@app.command()\ndef download(ctx: typer.Context):\n    \"\"\"\n    Download data from somewhere in the cloud.\n    \"\"\"\n    _settings = ctx.parent.parent.settings\n    logger.info(\"Downloading data from somwhere with user: %s.\", _settings.username)\n</code></pre>"},{"location":"reference/project_name/model/index.html","title":"model","text":""},{"location":"reference/project_name/model/main.html","title":"main","text":""},{"location":"reference/project_name/model/main.html#project_name.model.main.predict","title":"<code>predict(ctx)</code>","text":"<p>Perform predictions.</p> Source code in <code>project_name/model/main.py</code> <pre><code>@app.command()\ndef predict(ctx: typer.Context):\n    \"\"\"\n    Perform predictions.\n    \"\"\"\n    _settings = ctx.parent.parent.settings\n    logger.info(\"Predict results with %s.\", _settings.artifacts.model)\n</code></pre>"},{"location":"reference/project_name/model/main.html#project_name.model.main.train","title":"<code>train(ctx)</code>","text":"<p>Perform model training.</p> Source code in <code>project_name/model/main.py</code> <pre><code>@app.command()\ndef train(ctx: typer.Context):\n    \"\"\"\n    Perform model training.\n    \"\"\"\n    logger.info(\"Training a new model.\")\n</code></pre>"},{"location":"references/auto_doc_tools.html","title":"Auto documentation","text":"<p>Note</p> <p>There are many tools available for automatically generating documentation from your Python code. This guide focuses on a few tools to document the package, the CLI or single functions/classes.</p>"},{"location":"references/auto_doc_tools.html#auto-document-a-full-package","title":"Auto document a full package","text":"<p>By default, the documentation for your Python code is generated using MkDocs along with related plugins (ex. <code>mkdocstrings[python]</code>). The API Reference section presents the code structure, mirroring your project's directory tree.</p>"},{"location":"references/auto_doc_tools.html#auto-document-a-full-cli","title":"Auto document a full cli","text":"<p>If your CLI is properly documented, you can use Typer's auto-documentation tool to generate a Markdown file that summarizes all available commands:</p> <pre><code>typer project_name/main.py utils docs --output docs/references/cli_api_reference.md\n</code></pre> <p>We recommend adding this command to your CLI to update the CLI Reference section automatically.</p>"},{"location":"references/auto_doc_tools.html#auto-document-a-single-function-or-class","title":"Auto document a single function or class","text":"<p>You can document specific classes and functions automatically if your docstrings are square and clean. For instance, if you want to describe your production configuration in your documentation, typing something like:</p> <pre><code>::: project_name.config.Prod\n</code></pre> <p>would yield the following result:</p> <p>               Bases: <code>Base</code></p> <p>Production environment settings.</p> Source code in <code>project_name/config.py</code> <pre><code>class Prod(Base):\n    \"\"\"\n    Production environment settings.\n    \"\"\"\n\n    username: str = \"prod_username\"\n\n    model_config = SettingsConfigDict(env_file=\".prod.env\", env_file_encoding=\"utf-8\")\n</code></pre>"},{"location":"references/cli_api_reference.html","title":"CLI","text":"<p>Run all datascience commands.</p> <p>Usage:</p> <pre><code>$ [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--verbose / --no-verbose</code>: [default: no-verbose]</li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>run</code>: Run cmd line entry point, e.g.</li> <li><code>data</code>: Manages data flow.</li> <li><code>model</code>: Manages model training and predictions.</li> </ul>"},{"location":"references/cli_api_reference.html#run","title":"<code>run</code>","text":"<p>Run cmd line entry point, e.g. useful to start pipelines.</p> <p>Usage:</p> <pre><code>$ run [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"references/cli_api_reference.html#data","title":"<code>data</code>","text":"<p>Manages data flow.</p> <p>Usage:</p> <pre><code>$ data [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>download</code>: Download data from somewhere in the cloud.</li> <li><code>build</code>: Build a dataset based on downloaded data...</li> <li><code>delete</code>: Delete a dataset.</li> </ul>"},{"location":"references/cli_api_reference.html#data-download","title":"<code>data download</code>","text":"<p>Download data from somewhere in the cloud.</p> <p>Usage:</p> <pre><code>$ data download [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"references/cli_api_reference.html#data-build","title":"<code>data build</code>","text":"<p>Build a dataset based on downloaded data that is useful for the model.</p> <p>Usage:</p> <pre><code>$ data build [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"references/cli_api_reference.html#data-delete","title":"<code>data delete</code>","text":"<p>Delete a dataset.</p> <p>Usage:</p> <pre><code>$ data delete [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"references/cli_api_reference.html#model","title":"<code>model</code>","text":"<p>Manages model training and predictions.</p> <p>Usage:</p> <pre><code>$ model [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>train</code>: Perform model training.</li> <li><code>predict</code>: Perform predictions.</li> </ul>"},{"location":"references/cli_api_reference.html#model-train","title":"<code>model train</code>","text":"<p>Perform model training.</p> <p>Usage:</p> <pre><code>$ model train [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"references/cli_api_reference.html#model-predict","title":"<code>model predict</code>","text":"<p>Perform predictions.</p> <p>Usage:</p> <pre><code>$ model predict [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"tutorials/docker.html","title":"\ud83d\udc33 Installing and Running the App with Docker","text":"<p>This guide will walk you through how to install the required Docker environment and run the app. The app is Docker-runtime agnostic, meaning it can run on various Docker runtimes, including Docker Desktop, Colima, or any compatible Docker engine.</p>"},{"location":"tutorials/docker.html#install-a-container-runtime","title":"Install a container runtime","text":"<p>First, you\u2019ll need to install Docker on your system. Below are some installation options depending on your preferences:</p> Colima (macOS - Recommended)Docker Desktop (macOS) <p>If you'd prefer a lightweight, open-source alternative to Docker Desktop, you can install and use Colima. Colima runs Docker in a fast VM and is an excellent choice for those seeking a lightweight option. Follow these steps:</p> <ol> <li> <p>Install Colima and Docker CLI using Homebrew:</p> <pre><code>$ brew install colima docker\n</code></pre> </li> <li> <p>Start Colima to run a lightweight Docker engine:</p> <pre><code>$ colima start\n\nINFO[0001] starting colima\nINFO[0001] runtime: docker\nINFO[0003] starting ...                                  context=vm\nINFO[0015] provisioning ...                              context=docker\nINFO[0016] starting ...                                  context=docker\nINFO[0017] done\n</code></pre> </li> </ol> <p>\u2705 Once Colima is started, you can use the Docker CLI (<code>docker</code>) just like you would with Docker Desktop !</p> <ol> <li> <p>Check that the Docker daemon is running:</p> <pre><code>$ docker ps\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n</code></pre> </li> <li> <p>When you are done, stop the Docker VM by running:</p> <pre><code>$ colima stop\n</code></pre> </li> </ol> <p>\u26a0\ufe0f Warning: Docker Desktop requires a commercial license. Make sure to be compliant before using.</p> <p>Docker Desktop terms Commercial use of Docker Desktop in larger enterprises (more than 250 employees or more than $10 million USD in annual revenue) requires a paid subscription.</p> <ol> <li>Download and install Docker Desktop from Docker's official site.</li> <li>Launch the Docker Desktop app after installation.</li> <li> <p>Check that the Docker daemon is running:</p> <pre><code>$ docker ps\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n</code></pre> </li> </ol> Pros and cons of each tool Colima Docker Desktop Pricing \u2705 Free \u274c Paid (for certain usage) Resource Usage \u2705 Lightweight \u274c Heavy Interface \u274c Console only \u2705 GUI"},{"location":"tutorials/docker.html#build-and-run-the-app-in-docker","title":"Build and Run the App in Docker","text":""},{"location":"tutorials/docker.html#dev-mode","title":"\ud83d\udc7e Dev mode","text":"<p>This repo provides a ready-to-go setup to build and run a Docker image in interactive mode. This means that when you change a file in your IDE, the modifications are directly applied in the running Docker image. No rebuild is needed \ud83c\udf1f.</p> <p>\u26a0\ufe0f This is for dev and debugging purpose ONLY. For production environments, refer to the Prod mode example.</p> <p>First lock your Python environment (needed by the Dockerfile) and set the necessary permissions. Then run the build and run script:</p> <pre><code>uv lock\nchmod +x ./scripts/build_run_docker.sh\n./scripts/build_run_docker.sh\n</code></pre> <p>Once the app starts, you should see the following output indicating that the FastAPI app is running:</p> <pre><code>FastAPI   Starting development server \ud83d\ude80\n\n                Searching for package file structure from directories with __init__.py files\n                Importing from /app\n\nmodule   \ud83d\udcc1 app\n                \u251c\u2500\u2500 \ud83d\udc0d __init__.py\n                \u2514\u2500\u2500 \ud83d\udc0d main.py\n\ncode     Importing the FastAPI app object from the module with the following code:\n\n                from app.main import app\n\n    app   Using import string: app.main:app\n\nserver   Server started at http://0.0.0.0:8000\nserver   Documentation at http://0.0.0.0:8000/docs\n</code></pre> <p>Side-remarks:</p> <ul> <li>The entire project is mounted as a volume (expect for the .venv folder), to avoid rebuilding the image.</li> <li>Providing arguments overwrites the default <code>fastapi dev</code> command (see the Dockerfile), and allows you to run with more control.</li> <li>The script kills the container when you leave it (because of <code>docker run --rm</code> flag).</li> </ul>"},{"location":"tutorials/docker.html#prod-mode","title":"\ud83d\ude80 Prod mode","text":"<p>In a production setup, it's best to build the image from scratch without relying on volume mounts:</p> <pre><code>export IMAGE_NAME=\"app-prod\"\ndocker build -t \"$IMAGE_NAME\" .\ndocker run --rm --publish 8000:8000 --name \"$IMAGE_NAME-container\" --detach \"$IMAGE_NAME\" fastapi run\n</code></pre> <p>This time you get a truly self-packaged container, ready to be deployed:</p> <pre><code>FastAPI   Starting production server \ud83d\ude80\n            ...\nserver   Server started at http://0.0.0.0:8000\nserver   Documentation at http://0.0.0.0:8000/docs\n</code></pre>"},{"location":"tutorials/docker.html#faq","title":"FAQ","text":"<ul> <li> <p>Fixing Docker Buildx Issues After Uninstalling Docker Desktop (macOS)</p> <pre><code>$ docker buildx\nERROR: BuildKit is enabled but the buildx component is missing or broken.\n    Install the buildx component to build images with BuildKit:\nhttps://docs.docker.com/go/buildx/\n\"docker run\" requires at least 1 argument.\nSee 'docker run --help'.\n\nUsage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n</code></pre> Solution <p>By default, running <code>brew install docker</code> also installs <code>docker-buildx</code>, an extension of the Docker CLI that enables advanced build capabilities like multi-platform image builds.</p> <p>However, uninstalling Docker Desktop can sometimes leave behind broken symlinks or outdated configurations, which may cause <code>buildx</code> to misbehave. If you run into any <code>buildx</code>-related issues, follow these steps:</p> <p>1. Install or Reinstall the <code>docker-buildx</code> plugin</p> <pre><code>brew install docker-buildx\nbrew reinstall docker-buildx\n</code></pre> <p>2. Clean up old Docker Desktop configurations (if needed)</p> <p>Sometimes residual configs interfere with plugin discovery. To ensure Docker recognizes the Buildx plugin, update your Docker CLI config:</p> <ol> <li> <p>Open your Docker config file:</p> <pre><code>nano ~/.docker/config.json\n</code></pre> </li> <li> <p>Ensure the file includes:</p> <pre><code>\"cliPluginsExtraDirs\": [\n    \"/opt/homebrew/lib/docker/cli-plugins\"\n]\n</code></pre> </li> </ol> <p>After this, you should be able to use <code>docker buildx</code> without issues. You can verify with:</p> <pre><code>$ docker buildx version\ngithub.com/docker/buildx v0.19.2-desktop.1 412cbb151f1be3f8a94dc4eb03cd1b67f261dec5\n</code></pre> </li> </ul>"},{"location":"tutorials/testing.html","title":"Running unit tests","text":""},{"location":"tutorials/testing.html#pytest","title":"Pytest","text":"<p>Install the dev dependencies:</p> <pre><code>source .venv/bin/activate\nuv sync --extra dev\n</code></pre> <p>Run unit tests:</p> <pre><code>pytest\n</code></pre>"},{"location":"tutorials/testing.html#coverage","title":"Coverage","text":"<p>Coverage is automatically assessed. By default coverage is computed both on the <code>app</code> and <code>project_name</code> folders. Unit tests are configured in the <code>pyproject.toml</code> file.</p>"}]}